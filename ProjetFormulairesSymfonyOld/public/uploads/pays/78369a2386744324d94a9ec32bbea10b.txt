- Unit test symfonycasts
- API symfonycasts



Voici un exemple d'appel à une API en utilisant Symfony et l'outil Guzzle qui est un client HTTP pour PHP :

D'abord, vous devez installer Guzzle via composer :
Copy code
composer require guzzlehttp/guzzle
Ensuite, vous pouvez créer un service qui va gérer l'appel à l'API. Par exemple, voici un service qui appelle l'API OpenWeatherMap pour récupérer la météo d'une ville :
Copy code
<?php

namespace App\Service;

use GuzzleHttp\Client;

class WeatherService
{
    public function getWeather(string $city)
    {
        $client = new Client();
        $apiKey = 'your_api_key';
        $response = $client->get("http://api.openweathermap.org/data/2.5/weather?q=$city&appid=$apiKey&units=metric");
        $body = json_decode($response->getBody()->getContents());

        return $body;
    }
}
Enfin, vous pouvez utiliser ce service dans un controller pour récupérer les données de l'API et les afficher dans une vue :
Copy code
<?php

namespace App\Controller;

use App\Service\WeatherService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;

class WeatherController extends AbstractController
{
    /**
     * @Route("/weather/{city}", name="weather")
     */
    public function index(WeatherService $weatherService, $city)
    {
        $weather = $weatherService->getWeather($city);

        return $this->render('weather/index.html.twig', [
            'weather' => $weather,
            'city' => $city,
        ]);
    }
}
Il est important de noter que vous devez remplacer 'your_api_key' avec votre propre clé API pour cette API, vous pouvez l'obtenir en vous inscrivant sur leur site.
Ce n'est qu'un exemple général, il est important de vérifier les termes d'utilisation et les limites d'appels de l'API que vous souhaitez utiliser et de se conformer aux règles de l'API en question.